generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  vendor        Vendor?
  orders        Order[]
  addresses     Address[]
  reviews       Review[]
  wishlist      WishlistItem[]
  
  @@map("users")
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

model Vendor {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  shopName        String
  slug            String   @unique
  description     String?  @db.Text
  logo            String?
  banner          String?
  
  status          VendorStatus @default(PENDING)
  commissionRate  Decimal  @default(10) @db.Decimal(5, 2)
  
  phone           String?
  address         String?  @db.Text
  
  totalSales      Decimal  @default(0) @db.Decimal(12, 2)
  totalOrders     Int      @default(0)
  rating          Decimal  @default(0) @db.Decimal(3, 2)
  reviewCount     Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  products        Product[]
  orders          Order[]
  payouts         Payout[]
  
  @@map("vendors")
}

enum VendorStatus {
  PENDING
  ACTIVE
  SUSPENDED
  REJECTED
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  image       String?
  parentId    String?
  parent      Category? @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
  
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
  
  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  vendorId      String
  vendor        Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  
  name          String
  slug          String   @unique
  description   String   @db.Text
  
  price         Decimal  @db.Decimal(10, 2)
  comparePrice  Decimal? @db.Decimal(10, 2)
  cost          Decimal? @db.Decimal(10, 2)
  
  sku           String?  @unique
  barcode       String?
  
  stock         Int      @default(0)
  lowStockAlert Int      @default(5)
  
  weight        Decimal? @db.Decimal(10, 2)
  dimensions    String?
  
  status        ProductStatus @default(DRAFT)
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  
  viewCount     Int      @default(0)
  soldCount     Int      @default(0)
  
  seoTitle      String?
  seoDescription String? @db.Text
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  images        ProductImage[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlist      WishlistItem[]
  
  @@index([vendorId])
  @@index([categoryId])
  @@index([status])
  @@map("products")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  OUT_OF_STOCK
  ARCHIVED
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  url       String
  altText   String?
  sortOrder Int     @default(0)
  
  createdAt DateTime @default(now())
  
  @@index([productId])
  @@map("product_images")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  vendorId        String
  vendor          Vendor      @relation(fields: [vendorId], references: [id])
  
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  
  subtotal        Decimal     @db.Decimal(10, 2)
  shippingFee     Decimal     @default(0) @db.Decimal(10, 2)
  tax             Decimal     @default(0) @db.Decimal(10, 2)
  discount        Decimal     @default(0) @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  
  commission      Decimal     @db.Decimal(10, 2)
  vendorEarning   Decimal     @db.Decimal(10, 2)
  
  shippingAddress String      @db.Text
  billingAddress  String?     @db.Text
  
  customerNote    String?     @db.Text
  vendorNote      String?     @db.Text
  
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  items           OrderItem[]
  
  @@index([userId])
  @@index([vendorId])
  @@index([status])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)
  
  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  fullName    String
  phone       String
  addressLine String
  city        String
  state       String
  postalCode  String
  country     String  @default("TR")
  
  isDefault   Boolean @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  rating    Int
  comment   String?  @db.Text
  
  isVerified Boolean @default(false)
  status    ReviewStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([productId])
  @@unique([userId, productId])
  @@map("reviews")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([productId])
  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Payout {
  id          String       @id @default(cuid())
  vendorId    String
  vendor      Vendor       @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  amount      Decimal      @db.Decimal(10, 2)
  status      PayoutStatus @default(PENDING)
  
  method      String?
  reference   String?
  note        String?      @db.Text
  
  requestedAt DateTime     @default(now())
  processedAt DateTime?
  
  @@index([vendorId])
  @@map("payouts")
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}